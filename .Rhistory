"Recall(%)"
)
NEdata_order <<- NEdata_order
}
#####main codes ##############
RG_order1 = c(1:num_RG)
Eff.ne.1(RG_order1)
RG_order2 = as.numeric(NEdata_order[order(NEdata_order$NE, decreasing = T),][, 1])
Eff.ne.1(RG_order2)
NEdata_order$Ranking_order = c(1:length(RG_order2))
NEdata_order = NEdata_order[,-1]
NEdata_order <<- NEdata_order
print(NEdata_order)
message = paste(
" =========================================================================================================",
"\n",
"This step (Eff.ne for detecting normalized efficiencies of all single RGs) has all been completed!",
"\n",
"Now, you can use Eff.indexFinder function to detect the normalized efficiency of any multi-RG combination.",
"\n",
"The index file is saved in your working directory!",
"\n",
"==========================================================================================================",
"\n",
"For more technical details about this algorithm, please see our publication:",
"\n",
"Jipan Zhang, Yongju Zhao: Normalized efficiency changes in reference genes (RG): a call for use of multi-RG combination in qPCR experiments. 2021. Nature Communications.",
"\n"
)
cat(message)
}
Eff.ne(data.pv, num_RG, name_RG, pv.th)
Eff.ne <- function(data.pv, num_RG, name_RG, pv.th)
{
##########################code and calculate to obtain the gold standard############################
pvdata2 = data.pv
pvall_singleRGs = t(pvdata2[1:num_RG, ])                          #loading p-value of each single RG
pv.th <<- pv.th
(pvdata2[pvdata2 > pv.th[1]] <-
2) &
(pvdata2[pvdata2 < pv.th[1]] <-
1)                                              #2 means negative (p>x), #1 means positive (p<x)
pv_x_GS = apply(pvdata2[data.NFs.gsgNo, ], 2, mean)   #integrate the mean performance gold standard group at pv.th
(pv_x_GS[pv_x_GS > 1.5] <-
2) &
(pv_x_GS[pv_x_GS <= 1.5] <-
1)                                             #the mean of gold standard group, 1 (positive) or 2 (negative)
gold_standard <<-
pv_x_GS                                            #It is the gold standard
tp_real = sum(gold_standard == 1)                      #positive frequency of gold standard
tn_real = sum(gold_standard == 2)                      #negative frequency of gold standard
#######ROC curve plotting, and the AUC values calculating ########
library(pROC)
library(grDevices)
par(
mfrow = c(1, 1),
mar = c(4, 4, 1, 1),
oma = c(0.5, 0.5, 0.5, 0.5)
)
Eff.ne.1 <- function(RG_order) {
kk = length(RG_order)
ramp <- colorRamp(c("red", "orange", "darkcyan", "blue"))
colorpool <- rgb(ramp(seq(0, 1, length = kk)), max = 255)
for (ii in 1:kk)
{
if (ii == 1) {
rocobj <- plot.roc(
gold_standard,
pvall_singleRGs[, RG_order[ii]],
percent = TRUE,
col = colorpool[ii],
grid = TRUE,
smooth = TRUE,
xlab = "FPR (%)",
ylab = "TPR (%)",
legacy.axes = TRUE,
main = "Comparison in ROC space"
)
NE = round((rocobj$auc / 100 - 0.5) / 0.5 * 100, digit <-
4)
pv_x =  pvall_singleRGs[, RG_order[ii]]
(pv_x[pv_x > pv.th] <-          2) &
(pv_x[pv_x < pv.th] <-
1)            #2 means negative (p>x), #1 means positive (p<x)
pv_x_GSvsRG = apply(rbind(gold_standard, pv_x), 2, mean)
tp = sum(pv_x_GSvsRG == 1)
tn = sum(pv_x_GSvsRG == 2)
fn = tp_real - tp
fp = tn_real - tn
TPR = round(tp / tp_real * 100 , digit <- 4)
TNR = round(tn / tn_real * 100 , digit <- 4)
FPR = round(fp / tn_real * 100 , digit <- 4)
FNR = round(fn / tp_real * 100 , digit <- 4)
Precision = round(tp / (tp + fp) * 100 , digit <- 4)
Recall = round(tp / tp_real * 100 , digit <- 4)
NEdata_order = data.frame(
which(RG_order == ii),
paste0("NF", RG_order[ii]),
name_RG[RG_order[ii]],
NE,
TPR,
TNR,
FPR,
FNR,
Precision,
Recall
)
text(
20,
(70 - ii * 5),
labels = paste0("————", name_RG[RG_order[ii]], " (NE) = ", sprintf("%0.2f", NE), "%"),
col = colorpool[ii],
cex = 1.2
)
}
else {
rocobj <-          lines.roc(
gold_standard,
pvall_singleRGs[, RG_order[ii]],
percent = TRUE,
col = colorpool[ii],
grid = TRUE,
smooth = TRUE
)
NE = round((rocobj$auc / 100 - 0.5) / 0.5 * 100, digit <-
4)
pv_x =  pvall_singleRGs[, RG_order[ii]]
(pv_x[pv_x > pv.th] <-          2) &
(pv_x[pv_x < pv.th] <-
1)            #2 means negative (p>x), #1 means positive (p<x)
pv_x_GSvsRG = apply(rbind(gold_standard, pv_x), 2, mean)
tp = sum(pv_x_GSvsRG == 1)
tn = sum(pv_x_GSvsRG == 2)
fn = tp_real - tp
fp = tn_real - tn
TPR = round(tp / tp_real * 100 , digit <- 4)
TNR = round(tn / tn_real * 100 , digit <- 4)
FPR = round(fp / tn_real * 100 , digit <- 4)
FNR = round(fn / tp_real * 100 , digit <- 4)
Precision = round(tp / (tp + fp) * 100 , digit <- 4)
Recall = round(tp / tp_real * 100 , digit <- 4)
NEdata_order2  = c(
which(RG_order == ii),
paste0("NF", RG_order[ii]),
name_RG[RG_order[ii]],
NE,
TPR,
TNR,
FPR,
FNR,
Precision,
Recall
)
NEdata_order = rbind(NEdata_order, NEdata_order2)
text(
20,
(70 - ii * 5),
labels = paste0("————", name_RG[RG_order[ii]], " (NE) = ", sprintf("%0.2f", NE), "%"),
col = colorpool[ii],
cex = 1.2
)
}
}
colnames(NEdata_order) = c(
"NF_index",
"NF_index",
"NF_name",
"NE(%)",
"TPR(%)",
"TNR(%)",
"FPR(%)",
"FNR(%)",
"Precision(%)",
"Recall(%)"
)
NEdata_order <<- NEdata_order
}
#####main codes ##############
RG_order1 = c(1:num_RG)
Eff.ne.1(RG_order1)
RG_order2 = as.numeric(NEdata_order[order(NEdata_order$NE, decreasing = T),][, 1])
Eff.ne.1(RG_order2)
NEdata_order$Ranking_order = c(1:length(RG_order2))
NEdata_order = NEdata_order[,-1]
NEdata_order <<- NEdata_order
print(NEdata_order)
message = paste(
" =========================================================================================================",
"\n",
"This step (Eff.ne for detecting normalized efficiencies of all single RGs) has all been completed!",
"\n",
"Now, you can use Eff.indexFinder function to detect the normalized efficiency of any multi-RG combination.",
"\n",
"The index file is saved in your working directory!",
"\n",
"==========================================================================================================",
"\n",
"For more technical details about this algorithm, please see our publication:",
"\n",
"Jipan Zhang, Yongju Zhao: Normalized efficiency changes in reference genes (RG): a call for use of multi-RG combination in qPCR experiments. 2021. Nature Communications.",
"\n"
)
cat(message)
}
Eff.ne(data.pv, num_RG, name_RG, pv.th)
Eff.ne(data.pv, num_RG, name_RG, pv.th)
Eff.ne(data.pv, num_RG, name_RG, pv.th)
Eff.indexFinder(NF_index=c(22:10))
#' Eff.indexFinder, to detect the normalized efficiency of any normalization factor (single reference gene or possible multi-RG combinations)
#' according to their serial number from Index file
#'
#' @param NF_index The serial number of any NF, you can find it from the Index file
#'
#' @return NEdata_order The normalization efficiency (NE) values of normalization factors you want to detect
#' @export
#'
#' @examples Eff.indexFinder(NF_index=c(1:12))
#' @examples Eff.indexFinder(NF_index=12:20)
#'
Eff.indexFinder <- function(NF_index)
{
library(pROC)
library(grDevices)
par(mfrow = c(1, 1),
mar = c(4, 4, 1, 1),
oma = c(0.5, 0.5, 0.5, 0.5)  )
####### define the internal Function ########
Eff.ne.1 <- function(RG_order) {
pvdata2 = data.pv
pvall_singleRGs = t(pvdata2[RG_order, ])               #loading p-value of each single RG
tp_real = sum(gold_standard == 1)                      #positive frequency of gold standard
tn_real = sum(gold_standard == 2)                      #negative frequency of gold standard
kk = length(RG_order)
ramp <- colorRamp(c("red", "orange", "darkcyan", "blue"))
colorpool <- rgb(ramp(seq(0, 1, length = kk)), max = 255)
for (ii in 1:kk)
{
if (ii == 1) {
rocobj <- plot.roc(
gold_standard,
pvall_singleRGs[, ii],
percent = TRUE,
col = colorpool[ii],
grid = TRUE,
smooth = TRUE,
xlab = "FPR (%)",
ylab = "TPR (%)",
legacy.axes = TRUE,
main = paste0("ROC space (Gold standard at p=", pv.th[1], ")")
)
NE = round((rocobj$auc / 100 - 0.5) / 0.5 * 100, digit <- 4)
pv_x =  pvall_singleRGs[, ii]
(pv_x[pv_x > pv.th] <-          2) &
(pv_x[pv_x < pv.th] <-
1)            #2 means negative (p>x), #1 means positive (p<x)
pv_x_GSvsRG = apply(rbind(gold_standard, pv_x), 2, mean)
tp = sum(pv_x_GSvsRG == 1)
tn = sum(pv_x_GSvsRG == 2)
fn = tp_real - tp
fp = tn_real - tn
TPR = round(tp / tp_real * 100 , digit <- 4)
TNR = round(tn / tn_real * 100 , digit <- 4)
FPR = round(fp / tn_real * 100 , digit <- 4)
FNR = round(fn / tp_real * 100 , digit <- 4)
Precision = round(tp / (tp + fp) * 100 , digit <- 4)
Recall = round(tp / tp_real * 100 , digit <- 4)
NEdata_order = data.frame(
RG_order[ii],
paste0("NF", RG_order[ii]),
index[,2][RG_order[ii]],
NE,
TPR,
TNR,
FPR,
FNR,
Precision,
Recall
)
text(
20,65,
labels = paste0("——", index[,2][RG_order[ii]], " (NE) = ", sprintf("%0.2f", NE), "%"),
col = colorpool[ii],
cex = 1.2
)
}
else {
rocobj <-          lines.roc(
gold_standard,
pvall_singleRGs[, ii],
percent = TRUE,
col = colorpool[ii],
grid = TRUE,
smooth = TRUE
)
NE = round((rocobj$auc / 100 - 0.5) / 0.5 * 100, digit <- 4)
pv_x =  pvall_singleRGs[, ii]
(pv_x[pv_x > pv.th] <-  2) &
(pv_x[pv_x < pv.th] <-  1)            #2 means negative (p>x), #1 means positive (p<x)
pv_x_GSvsRG = apply(rbind(gold_standard, pv_x), 2, mean)
tp = sum(pv_x_GSvsRG == 1)
tn = sum(pv_x_GSvsRG == 2)
fn = tp_real - tp
fp = tn_real - tn
TPR = round(tp / tp_real * 100 , digit <- 4)
TNR = round(tn / tn_real * 100 , digit <- 4)
FPR = round(fp / tn_real * 100 , digit <- 4)
FNR = round(fn / tp_real * 100 , digit <- 4)
Precision = round(tp / (tp + fp) * 100 , digit <- 4)
Recall = round(tp / tp_real * 100 , digit <- 4)
NEdata_order2 = data.frame(
RG_order[ii],
paste0("NF", RG_order[ii]),
index[,2][RG_order[ii]],
NE,
TPR,
TNR,
FPR,
FNR,
Precision,
Recall
)
NEdata_order = rbind(NEdata_order, NEdata_order2)
text(
20,
(70 - ii * 5),
labels = paste0("——", index[,2][RG_order[ii]], " (NE) = ", sprintf("%0.2f", NE), "%"),
col = colorpool[ii],
cex = 1.2
)
}
}
colnames(NEdata_order) = c(
"NF_index",
"NF_index",
"NF_name",
"NE(%)",
"TPR(%)",
"TNR(%)",
"FPR(%)",
"FNR(%)",
"Precision(%)",
"Recall(%)"
)
NEdata_order <<- NEdata_order
}
#####main codes ##############
RG_order1 = NF_index
Eff.ne.1(RG_order1)
RG_order2 = as.numeric(NEdata_order[order(NEdata_order$NE, decreasing = T),][, 1])
Eff.ne.1(RG_order2)
NEdata_order$Ranking_order = c(1:length(RG_order2))
NEdata_order = NEdata_order[,-1]
NEdata_order <<- NEdata_order
print(NEdata_order)
}
Eff.indexFinder(NF_index=c(22:10))
Eff.indexFinder(NF_index=c(1002:1000))
Eff.indexFinder(NF_index=c(2009:2000))
Eff.indexFinder(NF_index=c(22:10))
data.pv[4090:4095,1:10]
data.pv[4090:4095,1:5]
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
setwd("C:/Users/jpanzhang/Desktop")
#????????Ҫ?İ?
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
setwd("C:/Users/jpanzhang/Desktop")
#????????Ҫ?İ?
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
document()
setwd("C:/Users/jpanzhang/Desktop/EffFinder/R")
document()
devtools::load_all()
devtools::check()
document()
devtools::check()
devtools::build()
?Eff.indexFinder
?mean
?Eff.indexFinder
?mean
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
document()
devtools::check()
devtools::load_all()
Eff.indexFinder()
?Eff.indexFinder
?Eff.singleFinder
??Eff.singleFinder
devtools::build()
devtools::install_github('jpanzhang/EffFinder')
library(EffFinder)
document()
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
devtools::document()
devtools::document()
devtools::document()
install()
library(EffFinder)
load_all()
document()
load_all()
library(EffFinder)
library(EffFinder)
remove.packages("EffFinder")
load_all()
#????
document()
devtools::load_all()
#????
document()
devtools::load_all()
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
devtools::document()
devtools::load_all()
document()
devtools::check()
document()
devtools::load_all()
setwd("C:/Users/jpanzhang/Desktop")
library(xlsx)
rawdata <- read.xlsx("rawdata.xlsx",sheetName=1,rowIndex=3:34,colIndex=3:56,header =F)
rnm <- read.xlsx("rawdata.xlsx",sheetName=1,rowIndex=3:34,colIndex=2,header =F)
cnm <- c(paste0("group",rep(1:18,each=3), "-", rep(1:3,18))); rnm=rnm[,1]
colnames(rawdata)=cnm
rownames(rawdata)=rnm
num_RG=12                                    #number of candidate reference genes
num_TG=20                                    #number of targets genes
num_group=18                                 #number of biological groups
num_sample=54                                #number of all samples
bio_rep=3                                    #biological replicates
name_RG <- rnm[1:num_RG]                     #RG name
name_TG <- rnm[(num_RG+1):(num_RG+num_TG)]   #TG name
Dis.ct=2
gsg.Ratio=0.01
pv.th=0.05
Primer.E <- read.csv("Primer.E.csv",header = T)[,2]
Primer.E <- read.csv("Primer.E.csv",header = T)[,2]
Primer.E
Eff.singleFinder(rawdata,
num_RG,
num_TG,
num_group,
num_sample,
bio_rep,
name_RG,
name_TG,
Dis.ct,
gsg.Ratio,
pv.th,
Primer.E)
bio_rep=3                                    #biological replicates
name_RG <- rnm[1:num_RG]                     #RG name
name_TG <- rnm[(num_RG+1):(num_RG+num_TG)]   #TG name
Dis.cq=2
gsg.Ratio=0.01
pv.th=0.05
Primer.E <- read.csv("Primer.E.csv",header = T)[,2]
Eff.singleFinder(rawdata,
num_RG,
num_TG,
num_group,
num_sample,
bio_rep,
name_RG,
name_TG,
Dis.cq,
gsg.Ratio,
pv.th,
Primer.E)
Eff.indexFinder(NF_index=c(22:10))
save.image("C:/Users/jpanzhang/Desktop/01EffFinder algorithm/01R_scripts and workspace/20210401再跑Eff.singleFinder全流程的环境变量.RData")
2^0.3
2^0.4
2^0.5
devtools::load_all()
Eff.indexFinder()
Eff.indexFinder(2)
devtools::load_all()
devtools::check()
devtools::load_all()
document()
devtools::load_all()
?Eff.singleFinder
?EffFinder
??EffFinder
install()
devtools::load_all()
library(devtools)
document()
?Eff.indexFinder
